############################################################################################################################
# Ansible Playbook: Automatisierung von Jenkins, Docker und Nginx Setup                                                    #
#                                                                                                                          #
# Dieses Playbook richtet eine Serverumgebung ein, um Jenkins, Docker-basierte Webanwendungen und                          #
# einen Nginx-Reverse-Proxy zu konfigurieren. Es ist in zwei Abschnitte unterteilt:                                        #
#                                                                                                                          # 
#   Allgemeine Konfiguration (hosts: all):                                                                                 #
#        Installiert erforderliche Pakete wie nginx, docker.io, docker-compose, und curl.                                  #
#        Richtet Jenkins ein, indem:                                                                                       #
#            Das Jenkins-Repository heruntergeladen wird.                                                                  #
#            Der Jenkins-GPG-Schlüssel importiert wird.                                                                    #
#            Java 11 und Jenkins selbst installiert werden.                                                                # 
#            Der Jenkins-Dienst gestartet wird.                                                                            #   
#        Aktualisiert das System und führt daemon-reload durch, um Änderungen zu übernehmen.                               #
#                                                                                                                          #
#    Webserver-Konfiguration (hosts: webserver):                                                                           #   
#        Docker-Konfiguration:                                                                                             #
#            Fügt einen Benutzer deploy zur Docker-Gruppe hinzu, damit dieser Docker ohne sudo verwenden kann.             #
#            Authentifiziert sich bei einer privaten Docker-Registry und startet Frontend- und Backend-Docker-Container.   #
#            Kopiert eine CSV-Datendatei für das Backend als Volume.                                                       #
#        SSH-Zugriff:                                                                                                      #  
#            Richtet einen öffentlichen Schlüssel (sshkey.pub) für den Benutzer deploy ein.                                # 
#        Nginx-Konfiguration:                                                                                              #
#            Kopiert die Konfigurationsdatei für den Nginx-Reverse-Proxy und startet Nginx neu.                            # 
#                                                                                                                          #
############################################################################################################################



---
- hosts: all
  become: yes
  tasks:
    - name: Update apt cache and make sure packages are installed
      apt:
        name: 
          - nginx
          - docker.io
          - docker-compose
          - curl
        update_cache: yes
    - name: Download Long Term Jenkins release
      get_url:
       url: https://pkg.jenkins.io/redhat-stable/jenkins.repo
       dest: /etc/yum.repos.d/jenkins.repo

    - name: Import jenkins key from url
      ansible.builtin.rpm_key:
       state: present
       key: https://pkg.jenkins.io/redhat-stable/jenkins.io.key

    - name: apt update
      apt:
       name: '*'
       state: latest

    - name: Install java
      apt:
        name: java-11-openjdk-devel
        state: present

    - name: Install jenkins
      apt:
        name: jenkins
        state: latest

    - name: daemon-reload to pick up config changes
      ansible.builtin.systemd:
       daemon_reload: yes

    - name: Start jenkins
      ansible.builtin.systemd:
        name: jenkins
        state: started      
        
- name: setup webserver
  become: true
  hosts: webserver
  tasks:
    - name: users | adding docker users (for use without sudo)
      user:
        name: "deploy"
        append: yes
        groups: docker
        
    - name: Set authorized key took from file
      authorized_key:
        user: deploy
        state: present
        key: "{{ lookup('file', './sshkey.pub') }}"

    - name: copy csv data 
      copy:
        src: data.csv
        dest: /home/deploy/data.csv
        force: no 
 # Ich habe meine Container aus der Azure Container Registry abgerufen. Dafür wird ein ACR-Dienst in der Azure Cloud benötigt.
    - name: Log into private registry and force re-authorization
      docker_login:
        registry: amircr.azurecr.io
        username: amircr
        password: "{{ ac_registry_password }}"
        reauthorize: yes

    - name: Re-create a frontend container
      docker_container:
          name: td_frontend
          image:  amircr.azurecr.io/td_frontend:4
          state: started
          recreate: yes
          ports:
            - 8080:80
    - name: Re-create a backend container
      docker_container:
          name: ttd_backend
          image:  amircr.azurecr.io/td_backend:8
          state: started
          recreate: yes
          ports:
            - 5000:5000   
          volumes:
            - /home/deploy/data.csv/app/data.csv   

    - name: copy reverse proxy config
      copy:
        src: nginx_frontend.conf
        dest: /etc/nginx/sites-enabled/default

    - name: Restart nginx
      service: name=nginx state=restarted
